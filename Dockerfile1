# Step 1: Use a base image for running the application
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS base
USER $APP_UID
EXPOSE 8080 8081 5000 7223 8085 5001

# Step 2: Create a build image
FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

# Step 3: Copy the whole directory into the build image
COPY . .

# Step 4: Restore dependencies
RUN dotnet restore "/src/App/Member.Api/Member.Api.csproj"

# Step 5: Build the application
RUN dotnet build "/src/App/Member.Api/Member.Api.csproj" -c $BUILD_CONFIGURATION -o /src/build

# Step 6: Publish the application
FROM build AS publish
RUN dotnet publish "/src/App/Member.Api/Member.Api.csproj" -c $BUILD_CONFIGURATION -o /src/publish /p:UseAppHost=false

# Step 7: Production stage (final image)
FROM base AS final

# Install ICU libraries to support globalization
USER root
RUN apk update && apk add icu-libs

# Switch back to non-root user
USER $APP_UID

# Set the environment variable to disable invariant globalization mode
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false

# Set the working directory for the final image
WORKDIR /inetpub/wwwroot

# Step 8: Copy the published app from the publish stage
COPY --from=publish /src/publish .

# Final stage check - ensure the application is copied correctly
RUN echo "Listing files in /inetpub/wwwroot during final stage" && ls -al /inetpub/wwwroot/

# Step 9: Set the entry point to run the application
ENTRYPOINT ["dotnet", "Member.Api.dll"]
